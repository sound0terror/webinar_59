{"version":3,"sources":["components/Orders/Order/Order.js","components/Graph/Graph.js","components/Orders/Orders.js","components/OrderForm/OrderForm.js","containers/FinancialAccounting.js","App.js","serviceWorker.js","index.js"],"names":["Order","props","className","name","category","price","onClick","deleteOrder","Graph","style","width","height","categories","map","key","amount","display","Orders","foodAverage","carAverage","entertainmentAverage","foodAmount","orders","filter","order","reduce","item","parseInt","carAmount","entertainmentAmount","console","log","totalPrice","push","id","OrderForm","onSubmit","addOrder","placeholder","onChange","nameChangeHandler","value","type","priceChangeHandler","categoryChangeHandler","FinancialAccounting","state","orderName","orderPrice","index","findIndex","splice","setState","isNumber","n","isNaN","parseFloat","e","preventDefault","alert","uuid","target","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a10cee6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Order = props => {\r\n  return (\r\n    <div className='d-flex justify-content-between'>\r\n      <h2>{props.name}</h2>\r\n      <h4>{props.category}</h4>\r\n      <div>\r\n        <span className='pr-2'>{props.price} ₸</span>\r\n        <button className='btn-primary btn' onClick={props.deleteOrder}>X</button>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Order;","import React from 'react';\r\nimport './Graph.css';\r\n\r\nconst Graph = props => {\r\n  return (\r\n    <div style={{width: '300px', height: \"50px\"}}>\r\n      {props.categories.map(category => {\r\n        return <span key={category.name} style={{width: category.amount + '%', height: \"50px\", display: 'inline-block'}} className={category.name}/>\r\n      })}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Graph;","import React from 'react';\r\nimport Order from \"./Order/Order\";\r\nimport Graph from \"../Graph/Graph\";\r\n\r\nconst Orders = props => {\r\n  let categories = [];\r\n  let foodAverage,\r\n    carAverage,\r\n    entertainmentAverage;\r\n  let foodAmount = props.orders.filter(order => order.category === 'food')\r\n    .reduce((amount, item) => parseInt(item.price) + amount, 0);\r\n\r\n\r\n  let carAmount = props.orders.filter(order => order.category === 'car')\r\n    .reduce((amount, item) => parseInt(item.price) + amount, 0);\r\n\r\n  let entertainmentAmount = props.orders.filter(order => order.category === 'entertainment')\r\n    .reduce((amount, item) => parseInt(item.price) + amount, 0);\r\n\r\n  if (foodAmount === 0) {\r\n    foodAverage = 0;\r\n  } else {\r\n    console.log(parseInt(foodAmount), parseInt(props.totalPrice));\r\n    foodAverage = parseInt(foodAmount) / parseInt(props.totalPrice) * 100;\r\n    console.log(foodAverage)\r\n  }\r\n\r\n  if (carAmount === 0) {\r\n    carAverage = 0;\r\n  } else {\r\n    carAverage = parseInt(carAmount) / parseInt(props.totalPrice) * 100;\r\n  }\r\n\r\n  if (entertainmentAmount === 0) {\r\n    entertainmentAverage = 0;\r\n  } else {\r\n    entertainmentAverage = parseInt(entertainmentAmount) / parseInt(props.totalPrice) * 100;\r\n  }\r\n\r\n  categories.push(\r\n    {name: 'food', amount: foodAverage},\r\n    {name: 'car', amount: carAverage},\r\n    {name: 'entertainment', amount: entertainmentAverage}\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className='border w-75'>\r\n        {props.orders.map(order => {\r\n          return <Order\r\n            key={order.id}\r\n            name={order.name}\r\n            price={order.price}\r\n            category={order.category}\r\n            deleteOrder={() => props.deleteOrder(order.id)}\r\n          />\r\n        })}\r\n      </div>\r\n      <Graph\r\n        categories={categories}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Orders;","import React from 'react';\r\n\r\nconst OrderForm = props => {\r\n  return (\r\n    <form className='mb-5' onSubmit={props.addOrder}>\r\n      <input placeholder='введите название' onChange={props.nameChangeHandler} value={props.name} name='name' type=\"text\"/>\r\n      <input placeholder='введите цену' onChange={props.priceChangeHandler} value={props.price} name='price' type=\"number\"/>\r\n      <select onChange={props.categoryChangeHandler} value={props.category} name=\"category\" id=\"category\">\r\n        {props.categories.map(category => {\r\n          return <option key={category.value} value={category.value}>{category.name}</option>\r\n        })}\r\n      </select>\r\n      <button>Add Product</button>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default OrderForm;","import React, {Component} from 'react';\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport OrderForm from \"../components/OrderForm/OrderForm\";\r\nimport uuid from 'uuid';\r\n\r\n\r\nclass FinancialAccounting extends Component {\r\n  state = {\r\n    orders: [], // {name: \"milk\", price: \"200\", id: 123}\r\n    categories: [{name: \"Еда\", value: \"food\"}, {name: \"Развлечения\", value: \"entertainment\"}, {name: \"Машины\", value: \"car\"}],\r\n    orderName: '',\r\n    orderPrice: '',\r\n    category: 'food',\r\n    totalPrice: 0,\r\n  };\r\n\r\n  deleteOrder = id => {\r\n    const index = this.state.orders.findIndex(order => order.id === id);\r\n    const orders = [...this.state.orders];\r\n    const totalPrice = this.state.totalPrice - orders[index].price;\r\n    orders.splice(index, 1);\r\n    this.setState({orders, totalPrice});\r\n  };\r\n  isNumber = (n) => {\r\n    return !isNaN(parseFloat(n)) && !isNaN(n - 0)\r\n  };\r\n\r\n  addOrder = (e) => {\r\n    e.preventDefault();\r\n    let name,\r\n      category,\r\n      price;\r\n    const isNum = this.isNumber(this.state.orderPrice);\r\n    if (isNum) {\r\n      if (this.state.orderPrice > 0) {\r\n        price = this.state.orderPrice;\r\n      }\r\n    } else {\r\n      alert(\"Вы ввели не число\");\r\n    }\r\n    if (this.state.category) {\r\n      category = this.state.category;\r\n    } else {\r\n      alert(\"Выберите категорию\");\r\n    }\r\n    if (this.state.orderName) {\r\n      name = this.state.orderName;\r\n    } else {\r\n      alert(\"Введите название\");\r\n    }\r\n    if (price && category && name) {\r\n      const order = {\r\n        id: uuid(),\r\n        name: this.state.orderName,\r\n        price: this.state.orderPrice,\r\n        category: this.state.category\r\n      };\r\n      const orders = [...this.state.orders];\r\n      orders.push(order);\r\n      this.setState({orders, totalPrice: parseInt(price) + parseInt(this.state.totalPrice)});\r\n    }\r\n  };\r\n\r\n  priceChangeHandler = (e) => {\r\n    const orderPrice = e.target.value;\r\n    this.setState({orderPrice});\r\n  };\r\n\r\n  nameChangeHandler = (e) => {\r\n    const orderName = e.target.value;\r\n    this.setState({orderName});\r\n  };\r\n\r\n  categoryChangeHandler = e => {\r\n    const category = e.target.value;\r\n    this.setState({category});\r\n  };\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <OrderForm\r\n          addOrder={this.addOrder}\r\n          price={this.state.orderPrice}\r\n          name={this.state.orderName}\r\n          categories={this.state.categories}\r\n          categoryChangeHandler={this.categoryChangeHandler}\r\n          nameChangeHandler={this.nameChangeHandler}\r\n          priceChangeHandler={this.priceChangeHandler}\r\n        />\r\n        <Orders\r\n          orders={this.state.orders}\r\n          deleteOrder={this.deleteOrder}\r\n          totalPrice={this.state.totalPrice}\r\n        />\r\n        <h1>total price: {this.state.totalPrice}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FinancialAccounting;","import React from 'react';\nimport './App.css';\nimport FinancialAccounting from \"./containers/FinancialAccounting\";\nimport Graph from \"./components/Graph/Graph\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <FinancialAccounting/>\n      <Graph categories={[{name: 'sdsd', amount: '20%'}]}/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}